{"ast":null,"code":"/**\r\n * 封装ajax请求\r\n * fetch(url,options)\r\n */\nconst baseUrl = process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : 'http://aoxie.com';\nexport async function request(url, data = {}, options = {}) {\n  url = baseUrl + url;\n\n  if (options.method) {\n    options.method = options.method.toLowerCase();\n  }\n\n  if (options.method === 'get' || options.get === undefined) {\n    const params = [];\n\n    for (const key in data) {\n      params.push(`${key}=${data[key]}`);\n    }\n\n    url = url + (url.includes('?') ? '&' : '?') + params.join('&');\n  } else if (['post', 'put', 'patch'].includes(options.method)) {\n    data = JSON.stringify(data);\n    options.headers['content-type'] = 'application/json';\n  }\n\n  return await fetch(url, { ...options,\n    data\n  }).then(res => res.json());\n}\nexport function get(url, data, options) {\n  return request(url, data, options);\n}\nexport function post(url, data, options = {\n  method: 'post'\n}) {\n  return request(url, data, options);\n}\nexport function remove(url, data, options = {\n  method: 'delete'\n}) {\n  return request(url, data, options);\n}\nexport function put(url, data, options = {\n  method: 'put'\n}) {\n  return request(url, data, options);\n}\nexport function patch(url, data, options = {\n  method: 'patch'\n}) {\n  return request(url, data, options);\n}\nexport default {\n  request,\n  get,\n  post,\n  put,\n  patch,\n  remove\n};","map":{"version":3,"sources":["D:/phpstudy_pro/WWW/react/xiangmu/meiliwan/src/utils/http.js"],"names":["baseUrl","process","env","NODE_ENV","request","url","data","options","method","toLowerCase","get","undefined","params","key","push","includes","join","JSON","stringify","headers","fetch","then","res","json","post","remove","put","patch"],"mappings":"AAAA;;;;AAIA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GAAyC,uBAAzC,GAAmE,kBAAnF;AAEA,OAAO,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,IAAI,GAAG,EAAnC,EAAuCC,OAAO,GAAG,EAAjD,EAAqD;AACxDF,EAAAA,GAAG,GAAGL,OAAO,GAAGK,GAAhB;;AACA,MAAGE,OAAO,CAACC,MAAX,EAAkB;AACdD,IAAAA,OAAO,CAACC,MAAR,GAAiBD,OAAO,CAACC,MAAR,CAAeC,WAAf,EAAjB;AACH;;AACD,MAAIF,OAAO,CAACC,MAAR,KAAmB,KAAnB,IAA4BD,OAAO,CAACG,GAAR,KAAgBC,SAAhD,EAA2D;AACvD,UAAMC,MAAM,GAAG,EAAf;;AACA,SAAK,MAAMC,GAAX,IAAkBP,IAAlB,EAAwB;AACpBM,MAAAA,MAAM,CAACE,IAAP,CAAa,GAAED,GAAI,IAAGP,IAAI,CAACO,GAAD,CAAM,EAAhC;AACH;;AACDR,IAAAA,GAAG,GAAGA,GAAG,IAAIA,GAAG,CAACU,QAAJ,CAAa,GAAb,IAAoB,GAApB,GAA0B,GAA9B,CAAH,GAAwCH,MAAM,CAACI,IAAP,CAAY,GAAZ,CAA9C;AACH,GAND,MAMO,IAAI,CAAC,MAAD,EAAS,KAAT,EAAgB,OAAhB,EAAyBD,QAAzB,CAAkCR,OAAO,CAACC,MAA1C,CAAJ,EAAuD;AAC1DF,IAAAA,IAAI,GAAGW,IAAI,CAACC,SAAL,CAAeZ,IAAf,CAAP;AACAC,IAAAA,OAAO,CAACY,OAAR,CAAgB,cAAhB,IAAkC,kBAAlC;AACH;;AAED,SAAO,MAAMC,KAAK,CAACf,GAAD,EAAM,EACpB,GAAGE,OADiB;AAEpBD,IAAAA;AAFoB,GAAN,CAAL,CAIVe,IAJU,CAILC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJF,CAAb;AAMH;AAED,OAAO,SAASb,GAAT,CAAaL,GAAb,EAAkBC,IAAlB,EAAwBC,OAAxB,EAAgC;AACnC,SAAOH,OAAO,CAACC,GAAD,EAAMC,IAAN,EAAYC,OAAZ,CAAd;AACH;AAGD,OAAO,SAASiB,IAAT,CAAcnB,GAAd,EAAmBC,IAAnB,EAAyBC,OAAO,GAAG;AAACC,EAAAA,MAAM,EAAC;AAAR,CAAnC,EAAmD;AACtD,SAAOJ,OAAO,CAACC,GAAD,EAAMC,IAAN,EAAYC,OAAZ,CAAd;AACH;AAED,OAAO,SAASkB,MAAT,CAAgBpB,GAAhB,EAAqBC,IAArB,EAA2BC,OAAO,GAAG;AAACC,EAAAA,MAAM,EAAC;AAAR,CAArC,EAAuD;AAC1D,SAAOJ,OAAO,CAACC,GAAD,EAAMC,IAAN,EAAYC,OAAZ,CAAd;AACH;AAED,OAAO,SAASmB,GAAT,CAAarB,GAAb,EAAkBC,IAAlB,EAAwBC,OAAO,GAAG;AAACC,EAAAA,MAAM,EAAC;AAAR,CAAlC,EAAiD;AACpD,SAAOJ,OAAO,CAACC,GAAD,EAAMC,IAAN,EAAYC,OAAZ,CAAd;AACH;AAED,OAAO,SAASoB,KAAT,CAAetB,GAAf,EAAoBC,IAApB,EAA0BC,OAAO,GAAI;AAACC,EAAAA,MAAM,EAAC;AAAR,CAArC,EAAsD;AACzD,SAAOJ,OAAO,CAACC,GAAD,EAAMC,IAAN,EAAYC,OAAZ,CAAd;AACH;AAED,eAAe;AACXH,EAAAA,OADW;AAEXM,EAAAA,GAFW;AAGXc,EAAAA,IAHW;AAIXE,EAAAA,GAJW;AAKXC,EAAAA,KALW;AAMXF,EAAAA;AANW,CAAf","sourcesContent":["/**\r\n * 封装ajax请求\r\n * fetch(url,options)\r\n */\r\nconst baseUrl = process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : 'http://aoxie.com'\r\n\r\nexport async function request(url, data = {}, options = {}) {\r\n    url = baseUrl + url;\r\n    if(options.method){\r\n        options.method = options.method.toLowerCase();\r\n    }\r\n    if (options.method === 'get' || options.get === undefined) {\r\n        const params = []\r\n        for (const key in data) {\r\n            params.push(`${key}=${data[key]}`)\r\n        }\r\n        url = url + (url.includes('?') ? '&' : '?') + params.join('&')\r\n    } else if (['post', 'put', 'patch'].includes(options.method)) {\r\n        data = JSON.stringify(data);\r\n        options.headers['content-type'] = 'application/json';\r\n    }\r\n\r\n    return await fetch(url, {\r\n        ...options,\r\n        data,\r\n        \r\n    }).then(res => res.json());\r\n    \r\n}\r\n\r\nexport function get(url, data, options){\r\n    return request(url, data, options)\r\n}\r\n\r\n\r\nexport function post(url, data, options = {method:'post'}){\r\n    return request(url, data, options)\r\n}\r\n\r\nexport function remove(url, data, options = {method:'delete'}){\r\n    return request(url, data, options)\r\n}\r\n\r\nexport function put(url, data, options = {method:'put'}){\r\n    return request(url, data, options)\r\n}\r\n\r\nexport function patch(url, data, options =  {method:'patch'}){\r\n    return request(url, data, options)\r\n}\r\n\r\nexport default {\r\n    request,\r\n    get,\r\n    post,\r\n    put,\r\n    patch,\r\n    remove\r\n}"]},"metadata":{},"sourceType":"module"}